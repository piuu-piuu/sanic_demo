import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

# Queries
USERS = "CREATE TABLE IF NOT EXISTS users (users_id BIGSERIAL PRIMARY KEY NOT NULL, name varchar, mail varchar, is_admin boolean);"
GOODS = "CREATE TABLE IF NOT EXISTS goods (id BIGSERIAL PRIMARY KEY NOT NULL, name varchar, description varchar, price money);"
ACCOUNT = "CREATE TABLE IF NOT EXISTS goods (account_id BIGSERIAL PRIMARY KEY NOT NULL, total money, CONSTRAINT fk_user FOREIGN KEY(users_id) REFERENCES users(users_id));"

def connect_to_postgres(user, password):
    # connect_string = "host='localhost' user='demo' password='demopwd'"
    connect_string = f"host='localhost' user='{user}' password='{password}'"
    try:
        connection = psycopg2.connect(connect_string)
        return connection, "Ok"
    except Exception as e:
        return None, str(e)
    
def connect_to_postgres_db(user, password, db_name):
    connect_string = f"host='localhost' dbname='{db_name}' user='demo' password='{password}'"
    try:
        connection = psycopg2.connect(connect_string)
        # connection.autocommit = True
        return connection, "Ok"
    except Exception as e:
        return None, str(e)


def create_database(user, password, db_name):
    connection, error = connect_to_postgres(user, password)
    if connection == None:
        print(error)    
    try:
        connection.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT);
        cursor = connection.cursor()
        try:
            sqlCreateDatabase = "create database "+db_name+";"
            cursor.execute(sqlCreateDatabase);
        except Exception as e:
            print(str(e))
    finally:
        connection.close()

def create_table(cursor, table_query):
    try:
        cursor.execute(table_query)
        print("Table created.")
        print(cursor.fetchmany(size=5) )
    except Exception as e:
        print(str(e))

def add_record_goods(cursor):
    pass

if __name__ == "__main__":
    create_database("demo", "demopwd", "demo")
    connection, error = connect_to_postgres_db("demo", "demopwd", "demo") 
    if connection != None:
        cursor = connection.cursor()
        cursor.execute('SELECT %s as connected;', ('Connection to postgres successful!',))
        print(cursor.fetchone())
        create_table(cursor, GOODS)
    else:
        print("Main() error", error)